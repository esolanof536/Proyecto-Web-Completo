{"ast":null,"code":"import { BASE_PATH, apiVersion } from './config';\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from '../Utils/constants';\nimport jwtDecode from 'jwt-decode'; //obtiene access Token\n\nexport function getAccessTokenApi() {\n  //obtiene accessToken de local storage\n  //local storage => inspeccionar/aplicacion/Local Storage\n  const accessToken = localStorage.getItem(ACCESS_TOKEN); //comprueba si el access token ha caducado o no\n  //si ha caducado retorna null\n  //si access token no ha caducado devuelve el access token\n\n  if (!accessToken || accessToken === \"null\") {\n    return null;\n  } //si devuelve true ha expirado y en consola devuelve null. \n  //Si devuelve false no ha expirado y devuelve el access token en consola\n\n\n  return willExpireToken(accessToken) ? null : accessToken;\n}\nexport function getRefreshTokenApi() {\n  //obtiene refreshToken de local storage\n  //local storage => inspeccionar/aplicacion/Local Storage\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n\n  if (!refreshToken || refreshToken === \"null\") {\n    return null;\n  }\n\n  return willExpireToken(refreshToken) ? null : refreshToken;\n}\n\nfunction willExpireToken(token) {\n  const seconds = 60; //decodifica el token\n\n  const metaToken = jwtDecode(token);\n  const {\n    exp\n  } = metaToken; //obtiene la fecha de hoy para realizar comparacion con el token\n\n  const now = (Date.now() + seconds) / 1000; // si now es mayor que la fecha de expiracion el token ha caducado\n\n  return now > exp; //devuelve true si token expiro y false si no ha expirado\n}\n\nexport function refreshAccessTokenApi(refreshToken) {\n  const url = `${BASE_PATH}/${apiVersion}/refresh-access-token`;\n  const bodyObject = {\n    refreshToken: refreshToken\n  };\n  const params = {\n    method: \"POST\",\n    body: JSON.stringify(bodyObject),\n    mode: 'no-cors',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  fetch(url, params).then(response => {\n    if (response.status !== 200) {\n      return null;\n    }\n\n    return response.json();\n  }).then(result => {\n    if (!result) {\n      logOut();\n    } else {\n      const {\n        accessToken,\n        refreshToken\n      } = result;\n      localStorage.setItem(ACCESS_TOKEN, accessToken);\n      localStorage.setItem(REFRESH_TOKEN, refreshToken);\n    }\n  });\n} //funcion para deslogear al usuario\n//lo que hace es literalemente borrar los tokens del local storage\n\nexport function logOut() {\n  localStorage.removeItem(ACCESS_TOKEN);\n  localStorage.removeItem(REFRESH_TOKEN);\n}","map":{"version":3,"sources":["C:/Users/Julian/Desktop/Test React/PRUEBA/demor/src/Api/auth.js"],"names":["BASE_PATH","apiVersion","ACCESS_TOKEN","REFRESH_TOKEN","jwtDecode","getAccessTokenApi","accessToken","localStorage","getItem","willExpireToken","getRefreshTokenApi","refreshToken","token","seconds","metaToken","exp","now","Date","refreshAccessTokenApi","url","bodyObject","params","method","body","JSON","stringify","mode","headers","fetch","then","response","status","json","result","logOut","setItem","removeItem"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,UAAtC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAO,SAASC,iBAAT,GAA6B;AAChC;AACA;AACA,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBN,YAArB,CAApB,CAHgC,CAIhC;AACA;AACA;;AACA,MAAI,CAACI,WAAD,IAAgBA,WAAW,KAAK,MAApC,EAA4C;AACxC,WAAO,IAAP;AACH,GAT+B,CAUhC;AACA;;;AACA,SAAOG,eAAe,CAACH,WAAD,CAAf,GAA+B,IAA/B,GAAsCA,WAA7C;AAEH;AACD,OAAO,SAASI,kBAAT,GAA8B;AACjC;AACA;AACA,QAAMC,YAAY,GAAGJ,YAAY,CAACC,OAAb,CAAqBL,aAArB,CAArB;;AACA,MAAI,CAACQ,YAAD,IAAiBA,YAAY,KAAK,MAAtC,EAA8C;AAC1C,WAAO,IAAP;AACH;;AACD,SAAOF,eAAe,CAACE,YAAD,CAAf,GAAgC,IAAhC,GAAuCA,YAA9C;AACH;;AACD,SAASF,eAAT,CAAyBG,KAAzB,EAAgC;AAC5B,QAAMC,OAAO,GAAG,EAAhB,CAD4B,CAE5B;;AACA,QAAMC,SAAS,GAAGV,SAAS,CAACQ,KAAD,CAA3B;AAEA,QAAM;AAAEG,IAAAA;AAAF,MAAUD,SAAhB,CAL4B,CAM5B;;AACA,QAAME,GAAG,GAAG,CAACC,IAAI,CAACD,GAAL,KAAaH,OAAd,IAAyB,IAArC,CAP4B,CAQ5B;;AACA,SAAOG,GAAG,GAAGD,GAAb,CAT4B,CAU5B;AACH;;AACD,OAAO,SAASG,qBAAT,CAA+BP,YAA/B,EAA6C;AAChD,QAAMQ,GAAG,GAAI,GAAEnB,SAAU,IAAGC,UAAW,uBAAvC;AACA,QAAMmB,UAAU,GAAG;AACfT,IAAAA,YAAY,EAAEA;AADC,GAAnB;AAGA,QAAMU,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAFK;AAGXM,IAAAA,IAAI,EAAE,SAHK;AAIXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAJE,GAAf;AAQAC,EAAAA,KAAK,CAACT,GAAD,EAAME,MAAN,CAAL,CACKQ,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,aAAO,IAAP;AACH;;AACD,WAAOD,QAAQ,CAACE,IAAT,EAAP;AACH,GANL,EAOKH,IAPL,CAOUI,MAAM,IAAI;AACZ,QAAI,CAACA,MAAL,EAAa;AACTC,MAAAA,MAAM;AACT,KAFD,MAEO;AACH,YAAM;AAAE5B,QAAAA,WAAF;AAAeK,QAAAA;AAAf,UAAgCsB,MAAtC;AACA1B,MAAAA,YAAY,CAAC4B,OAAb,CAAqBjC,YAArB,EAAmCI,WAAnC;AACAC,MAAAA,YAAY,CAAC4B,OAAb,CAAqBhC,aAArB,EAAoCQ,YAApC;AACH;AACJ,GAfL;AAgBH,C,CACD;AACA;;AACA,OAAO,SAASuB,MAAT,GAAkB;AACrB3B,EAAAA,YAAY,CAAC6B,UAAb,CAAwBlC,YAAxB;AACAK,EAAAA,YAAY,CAAC6B,UAAb,CAAwBjC,aAAxB;AACH","sourcesContent":["import { BASE_PATH, apiVersion } from './config';\r\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from '../Utils/constants'\r\nimport jwtDecode from 'jwt-decode'\r\n\r\n//obtiene access Token\r\nexport function getAccessTokenApi() {\r\n    //obtiene accessToken de local storage\r\n    //local storage => inspeccionar/aplicacion/Local Storage\r\n    const accessToken = localStorage.getItem(ACCESS_TOKEN);\r\n    //comprueba si el access token ha caducado o no\r\n    //si ha caducado retorna null\r\n    //si access token no ha caducado devuelve el access token\r\n    if (!accessToken || accessToken === \"null\") {\r\n        return null;\r\n    }\r\n    //si devuelve true ha expirado y en consola devuelve null. \r\n    //Si devuelve false no ha expirado y devuelve el access token en consola\r\n    return willExpireToken(accessToken) ? null : accessToken;\r\n\r\n}\r\nexport function getRefreshTokenApi() {\r\n    //obtiene refreshToken de local storage\r\n    //local storage => inspeccionar/aplicacion/Local Storage\r\n    const refreshToken = localStorage.getItem(REFRESH_TOKEN);\r\n    if (!refreshToken || refreshToken === \"null\") {\r\n        return null\r\n    }\r\n    return willExpireToken(refreshToken) ? null : refreshToken;\r\n}\r\nfunction willExpireToken(token) {\r\n    const seconds = 60;\r\n    //decodifica el token\r\n    const metaToken = jwtDecode(token);\r\n\r\n    const { exp } = metaToken;\r\n    //obtiene la fecha de hoy para realizar comparacion con el token\r\n    const now = (Date.now() + seconds) / 1000;\r\n    // si now es mayor que la fecha de expiracion el token ha caducado\r\n    return now > exp;\r\n    //devuelve true si token expiro y false si no ha expirado\r\n}\r\nexport function refreshAccessTokenApi(refreshToken) {\r\n    const url = `${BASE_PATH}/${apiVersion}/refresh-access-token`\r\n    const bodyObject = {\r\n        refreshToken: refreshToken\r\n    }\r\n    const params = {\r\n        method: \"POST\",\r\n        body: JSON.stringify(bodyObject),\r\n        mode: 'no-cors',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    };\r\n    fetch(url, params)\r\n        .then(response => {\r\n            if (response.status !== 200) {\r\n                return null;\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(result => {\r\n            if (!result) {\r\n                logOut();\r\n            } else {\r\n                const { accessToken, refreshToken } = result;\r\n                localStorage.setItem(ACCESS_TOKEN, accessToken);\r\n                localStorage.setItem(REFRESH_TOKEN, refreshToken);\r\n            }\r\n        })\r\n}\r\n//funcion para deslogear al usuario\r\n//lo que hace es literalemente borrar los tokens del local storage\r\nexport function logOut() {\r\n    localStorage.removeItem(ACCESS_TOKEN);\r\n    localStorage.removeItem(REFRESH_TOKEN);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}