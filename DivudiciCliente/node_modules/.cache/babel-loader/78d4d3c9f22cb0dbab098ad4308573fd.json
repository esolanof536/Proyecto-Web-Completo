{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aleme\\\\Desktop\\\\web acttual\\\\demor\\\\src\\\\Provider\\\\AuthProviders.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext } from 'react';\nimport { getAccessTokenApi, getRefreshTokenApi, refreshAccessTokenApi, logOut } from '../Api/auth';\nimport jwtDecode from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport default function AuthProvider(props) {\n  _s();\n\n  const {\n    children\n  } = props;\n  const [user, setUser] = useState({\n    user: null,\n    isLoading: true\n  });\n  useEffect(() => {\n    checkUserLogin(setUser);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: user,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 12\n  }, this);\n}\n\n_s(AuthProvider, \"R1uiF3RN05Yr/VQfLE0eTfmMF1U=\");\n\n_c = AuthProvider;\n\nfunction checkUserLogin(setUser) {\n  const accessToken = getAccessTokenApi();\n\n  if (!accessToken) {\n    const refreshToken = getRefreshTokenApi();\n\n    if (!refreshToken) {\n      logOut();\n      setUser({\n        user: null,\n        isLoading: false\n      });\n    } else {\n      refreshAccessTokenApi(refreshToken);\n    }\n  } else {\n    setUser({\n      isLoading: false,\n      user: jwtDecode(accessToken)\n    });\n  }\n} // IMPORTANTE: SI LA APP FALLA A LA HORA DE CREAR LOS TOKEN Y ENVIAR AL MENU PRINCIPAL ES POR LA EXTENCION\n// CODIGO DE ERROR: InvalidTokenError: Invalid token specified: .....\n\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/aleme/Desktop/web acttual/demor/src/Provider/AuthProviders.js"],"names":["React","useState","useEffect","createContext","getAccessTokenApi","getRefreshTokenApi","refreshAccessTokenApi","logOut","jwtDecode","AuthContext","AuthProvider","props","children","user","setUser","isLoading","checkUserLogin","accessToken","refreshToken"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,EAAgDC,qBAAhD,EAAuEC,MAAvE,QAAqF,aAArF;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAGA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,EAAjC;AACP,eAAe,SAASO,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC;AAC7BY,IAAAA,IAAI,EAAE,IADuB;AAE7BE,IAAAA,SAAS,EAAE;AAFkB,GAAD,CAAhC;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,cAAc,CAACF,OAAD,CAAd;AACH,GAFQ,EAEN,EAFM,CAAT;AAGA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAED,IAA7B;AAAA,cAAoCD;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GAVuBF,Y;;KAAAA,Y;;AAWxB,SAASM,cAAT,CAAwBF,OAAxB,EAAiC;AAC7B,QAAMG,WAAW,GAAGb,iBAAiB,EAArC;;AACA,MAAI,CAACa,WAAL,EAAkB;AACd,UAAMC,YAAY,GAAGb,kBAAkB,EAAvC;;AACA,QAAI,CAACa,YAAL,EAAmB;AACfX,MAAAA,MAAM;AACNO,MAAAA,OAAO,CAAC;AACJD,QAAAA,IAAI,EAAE,IADF;AAEJE,QAAAA,SAAS,EAAE;AAFP,OAAD,CAAP;AAIH,KAND,MAMO;AACHT,MAAAA,qBAAqB,CAACY,YAAD,CAArB;AACH;AACJ,GAXD,MAWO;AACHJ,IAAAA,OAAO,CAAC;AACJC,MAAAA,SAAS,EAAE,KADP;AAEJF,MAAAA,IAAI,EAAEL,SAAS,CAACS,WAAD;AAFX,KAAD,CAAP;AAIH;AACJ,C,CAED;AACA","sourcesContent":["import React, { useState, useEffect, createContext } from 'react';\r\nimport { getAccessTokenApi, getRefreshTokenApi, refreshAccessTokenApi, logOut } from '../Api/auth'\r\nimport jwtDecode from 'jwt-decode'\r\n\r\n\r\nexport const AuthContext = createContext();\r\nexport default function AuthProvider(props) {\r\n    const { children } = props;\r\n    const [user, setUser] = useState({\r\n        user: null,\r\n        isLoading: true\r\n    });\r\n    useEffect(() => {\r\n        checkUserLogin(setUser);\r\n    }, []);\r\n    return <AuthContext.Provider value={user}>{children}</AuthContext.Provider>\r\n}\r\nfunction checkUserLogin(setUser) {\r\n    const accessToken = getAccessTokenApi();\r\n    if (!accessToken) {\r\n        const refreshToken = getRefreshTokenApi();\r\n        if (!refreshToken) {\r\n            logOut();\r\n            setUser({\r\n                user: null,\r\n                isLoading: false\r\n            });\r\n        } else {\r\n            refreshAccessTokenApi(refreshToken);\r\n        }\r\n    } else {\r\n        setUser({\r\n            isLoading: false,\r\n            user: jwtDecode(accessToken)\r\n        });\r\n    }\r\n}\r\n\r\n// IMPORTANTE: SI LA APP FALLA A LA HORA DE CREAR LOS TOKEN Y ENVIAR AL MENU PRINCIPAL ES POR LA EXTENCION\r\n// CODIGO DE ERROR: InvalidTokenError: Invalid token specified: ....."]},"metadata":{},"sourceType":"module"}